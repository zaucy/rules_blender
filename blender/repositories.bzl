"""Declare runtime dependencies

These are needed for local dev, and users must install them as well.
See https://docs.bazel.build/versions/main/skylark/deploying.html#dependencies
"""

load("//blendeblender/private:versions.bzl", "TOOL_VERSIONS")
load("//blender/private:toolchains_repo.bzl", "PLATFORMS", "toolchains_repo")

_DOC = "Fetch external tools needed for blender toolchain"
_ATTRS = {
    "blender_version": attr.string(mandatory = True, values = TOOL_VERSIONS.keys()),
    "platform": attr.string(mandatory = True, values = PLATFORMS.keys()),
}

def _blender_repo_impl(repository_ctx):
    url = "https://github.com/someorg/someproject/releases/download/v{0}/blender-{1}.zip".format(
        repository_ctx.attr.blender_version,
        repository_ctx.attr.platform,
    )
    repository_ctx.download_and_extract(
        url = url,
        integrity = TOOL_VERSIONS[repository_ctx.attr.blender_version][repository_ctx.attr.platform],
    )
    build_content = """# Generated by blender/repositories.bzl
load("@com_myorg_rules_blender//blender:toolchain.bzl", "blender_toolchain")

blender_toolchain(
    name = "blender_toolchain",
    target_tool = select({
        "@bazel_tools//src/conditions:host_windows": "blender.exe",
        "//conditions:default": "blender",
    }),
)
"""
    repository_ctx.file("BUILD.bazel", build_content)

blender_repositories = repository_rule(
    _blender_repo_impl,
    doc = _DOC,
    attrs = _ATTRS,
)

# Wrapper macro around everything above, this is the primary API
def blender_register_toolchains(name, register = True, **kwargs):
    """Convenience macro for users which does typical setup.

    - create a repository for each built-in platform like "blender_linux_amd64" -
      this repository is lazily fetched when node is needed for that platform.
    - TODO: create a convenience repository for the host platform like "blender_host"
    - create a repository exposing toolchains for each platform like "blender_platforms"
    - register a toolchain pointing at each platform
    Users can avoid this macro and do these steps themselves, if they want more control.
    Args:
        name: base name for all created repos, like "blender1_14"
        register: whether to call through to native.register_toolchains.
            Should be True for WORKSPACE users, but false when used under bzlmod extension
        **kwargs: passed to each node_repositories call
    """
    for platform in PLATFORMS.keys():
        blender_repositories(
            name = name + "_" + platform,
            platform = platform,
            **kwargs
        )
        if register:
            native.register_toolchains("@%s_toolchains//:%s_toolchain" % (name, platform))

    toolchains_repo(
        name = name + "_toolchains",
        user_repository_name = name,
    )
